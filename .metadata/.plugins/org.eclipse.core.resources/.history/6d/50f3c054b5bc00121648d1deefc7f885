package com.me.mygdxgame;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Buttons;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.Fixture;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.Array;

public class Player extends Sprite {	

	private Vector3 worldPos = Vector3.Zero;
	private Vector3 tmpPos = Vector3.Zero;
	private Vector3 worldCenterPos = Vector3.Zero;
	private Vector3 startPos = Vector3.Zero;
	private float speed = 200.0f;
	private float scale;
	public static final String TEXTURE_PATH = "spritesheet/player/player_walking.png";
	public static final String TEST_TEXTURE_PATH = "spritesheet/player/player_spritesheet/standing_2.png";
	public static final String PACKFILE_PATH = "spritesheet/player/player_walking.txt";
	private Animation walk_up_anim;
	private Animation walk_down_anim;
	private Animation walk_left_anim;
	private Animation walk_right_anim;
	private Array<AtlasRegion> standing_regions;
	private TextureAtlas walking_spriteSheet;
	private TextureRegion currentFrame;	
	private State state = State.Standing;
	private State LastWalkingState = State.WalkingDown;
	private float stateTime = 0;
	private boolean isStrafing = false;
	
	private BodyDef bodyDef;	
	private Body body;
	private CircleShape circle;
	private FixtureDef fixtureDef;
	private Fixture fixture;
	
	enum State {
		Standing,
		WalkingLeft,
		WalkingRight,
		WalkingUp,
		WalkingDown,
	}
	
	public Player(Vector3 startPos, float scale, World world) {	
//		super((Texture) MyGdxGame.assetManager.get(TEST_TEXTURE_PATH));
		super();
		
		walking_spriteSheet = new TextureAtlas(PACKFILE_PATH);
		
		walk_up_anim = new Animation(0.05f, walking_spriteSheet.findRegions("walk_up"));
		walk_down_anim = new Animation(0.05f, walking_spriteSheet.findRegions("walk_down"));
		walk_left_anim = new Animation(0.05f, walking_spriteSheet.findRegions("walk_left"));
		walk_right_anim = new Animation(0.05f, walking_spriteSheet.findRegions("walk_right"));
		standing_regions = walking_spriteSheet.findRegions("standing"); 
		
		currentFrame = standing_regions.get(1); //get the standing down sprite
		
		this.scale = scale;		
		
		this.startPos = startPos;		
		
		setOrigin(getWidth() / 2, getHeight() / 2);
		
		this.setRegion(currentFrame);
		this.setBounds(startPos.x, startPos.y, currentFrame.getRegionWidth(), currentFrame.getRegionHeight());	
		
		
		///BOX2d TEST STUFF
		bodyDef = new BodyDef();
		// We set our body to dynamic, for something like ground which doesnt move we would set it to StaticBody
		bodyDef.type = BodyType.DynamicBody;
		// Set our body's starting position in the world
		bodyDef.position.set(getWorldPosition().x, getWorldPosition().y);
		
		
		// Create our body in the world using our body definition
		body = world.createBody(bodyDef);

		// Create a circle shape and set its radius to 6
		circle = new CircleShape();
		circle.setRadius((getRegionWidth() / 2) * Constants.WORLD_TO_BOX);

		// Create a fixture definition to apply our shape to
		fixtureDef = new FixtureDef();
		fixtureDef.shape = circle;
		fixtureDef.density = 0.5f; 
		fixtureDef.friction = 0.4f;
		fixtureDef.restitution = 0.6f; // Make it bounce a little bit

		// Create our fixture and attach it to the body
		fixture = body.createFixture(fixtureDef);
		////////////////////
	}
	
	public void update(Rectangle worldBounds, float deltaTime) {		
		stateTime += Gdx.graphics.getDeltaTime(); 

		setCurrentAnimationFrame();
		handleInput(worldBounds);			
	}
	
	@Override
	public void draw(SpriteBatch spriteBatch) {
		spriteBatch.draw(currentFrame, getWorldPosition().x, getWorldPosition().y, getWidth() /32, getHeight() / 32);
	}
	
	public void dispose()
	{
		circle.dispose();
	}
	
	private void setCurrentAnimationFrame()
	{
		if(state == State.Standing)
		{
			if(LastWalkingState == State.WalkingUp)
				currentFrame = standing_regions.get(0); //get the standing up texture
			else if(LastWalkingState == State.WalkingDown)
				currentFrame = standing_regions.get(1); //get the standing down texture
			else if(LastWalkingState == State.WalkingLeft)
				currentFrame = standing_regions.get(2); //get the standing left texture
			else if(LastWalkingState == State.WalkingRight)
				currentFrame = standing_regions.get(3); //get the standing right texture			
		}
		else if(state == State.WalkingUp)
		{
			currentFrame = walk_up_anim.getKeyFrame(this.stateTime, true);
		}
		else if(state == State.WalkingDown)
		{
			currentFrame = walk_down_anim.getKeyFrame(this.stateTime, true);
		}
		else if(state == State.WalkingLeft)
		{
			currentFrame = walk_left_anim.getKeyFrame(this.stateTime, true);
		}
		else if(state == State.WalkingRight)
		{
			currentFrame = walk_right_anim.getKeyFrame(this.stateTime, true);
		}
		else
		{
			System.out.println("FAIL! " + state);
		}
		
		LastWalkingState = state;
	}
	
	
	private void handleInput(Rectangle worldBounds) {
		tmpPos.x = getX();
		tmpPos.y = getY();
		
		if (Gdx.input.isKeyPressed(Keys.SPACE))
			body.applyLinearImpulse(new Vector2(0.2f, 0.1f), body.getWorldCenter(), false);
		
		if(Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT))
		{
			isStrafing = true;
		}
		else
		{
			isStrafing = false;			
		}
		
		if (Gdx.input.isKeyPressed(Keys.UP)) {		
			tmpPos.y = getY() + (Gdx.graphics.getDeltaTime() * speed);
//			setY(Math.round()));
			
			if(!isStrafing)
				state = State.WalkingUp;
		} else if (Gdx.input.isKeyPressed(Keys.DOWN)) {
			tmpPos.y = getY() - (Gdx.graphics.getDeltaTime() * speed);
//			setY(Math.round(getY() - (Gdx.graphics.getDeltaTime() * speed)));
			
			if(!isStrafing)
				state = State.WalkingDown;
		} else if (Gdx.input.isKeyPressed(Keys.LEFT)) {
			tmpPos.x = getX() - (Gdx.graphics.getDeltaTime() * speed);
//			setX(Math.round(getX() - (Gdx.graphics.getDeltaTime() * speed)));
			
			if(!isStrafing)
				state = State.WalkingLeft;
		} else if (Gdx.input.isKeyPressed(Keys.RIGHT)) {
			tmpPos.x = getX() + (Gdx.graphics.getDeltaTime() * speed);
//			setX(Math.round(getX() + (Gdx.graphics.getDeltaTime() * speed)));
			
			if(!isStrafing)
				state = State.WalkingRight;
		}
		else			
		{
			if(!isStrafing)
				state = State.Standing;
		}

		if (Gdx.input.isTouched()) {
			if (Gdx.input.isButtonPressed(Buttons.LEFT)) {
				System.out.println(getX() + ":" + getY());
//				System.out.println("cam " + Math.round(getX()) / 32f + ":" + Math.round(getY()) / 32f);
				tmpPos.x = Math.round(getX() + -Gdx.input.getDeltaX());
				tmpPos.y = Math.round(getY() + Gdx.input.getDeltaY());
			}
		}
		
		setX(tmpPos.x);
		setY(tmpPos.y);
//		if(tmpPos.x < (worldBounds.x + worldBounds.width))
//			setX(tmpPos.x);
//		else
//			tmpPos.x = worldBounds.x + worldBounds.width;
//		if(tmpPos.x > worldBounds.x)
//			setX(tmpPos.x);
//		else
//			tmpPos.x = worldBounds.x;
//		
//		
//		if(tmpPos.y < (worldBounds.y * 32 + worldBounds.height * 32))
//			setY(tmpPos.y);
//		else
//			tmpPos.y = (worldBounds.y * 32 + worldBounds.height * 32);
//		if(tmpPos.y > worldBounds.y * 32)
//			setY(tmpPos.y);
//		else
//			tmpPos.y = worldBounds.y * 32;
	}

	public Vector3 getWorldPosition() {
<<<<<<< HEAD
//		worldPos.x =  Math.round(getX()) / 32f;
//		worldPos.y =  Math.round(getY()) / 32f;
		worldPos.x =  getX() / 32;
		worldPos.y =  getY() / 32;
=======
		worldPos.x = Math.round(getX()) / 32f;
		worldPos.y = Math.round(getY()) / 32f;
>>>>>>> did some more stuff
		return worldPos;
	}	
	
	public Vector3 getWorldCenterPosition() {
		worldCenterPos.x = Math.round(getX() + getOriginX()) / 32;
		worldCenterPos.y = Math.round(getY() + getOriginY()) / 32;
		return worldCenterPos;
	}
		
	public Vector3 getStartPos()
	{
		return this.startPos;
	}
}
